/*
n个台阶会有一次n阶的跳法 ,f(n)表示
n = 1时，只有1种跳法，f(1) = 1
n = 2时，会有两个方式，一次1阶或者2阶，f(2) = f(2-1) + f(2-2) 
n = 3时，
    第一次跳出1阶：f(3-1);
    第一次跳出2阶:f(3-2)；
    第一次3阶:f(3-3)
    因此f(3) = f(3-1)+f(3-2)+f(3-3)
...
...
n = n时，
    f(n) = f(n-1)+f(n-2)+...+f(n-(n-1)) + f(n-n) => f(0) + f(1) + f(2) + f(3) + ... + f(n-1)
    
由以上简化：
    f(n-1) = f(0) + f(1)+f(2)+f(3) + ... + f((n-1)-1) 
           = f(0) + f(1) + f(2) + f(3) + ... + f(n-2)
      f(n) = f(0) + f(1) + f(2) + f(3) + ... + f(n-2) + f(n-1) 
           = f(n-1) + f(n-1)
    得：f(n) = 2*f(n-1)
    
 得出跳法为：
          1       ,(n=0 ) 
f(n) =    1       ,(n=1 )
          2*f(n-1),(n>=2)
*/




class Solution {
public:
    int jumpFloorII(int n) {
        if(n==0)
            return 0;
        return 1<<(n-1);//即2的n-1次方；
    }
};
